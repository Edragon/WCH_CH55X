C51 COMPILER V9.56.0.0   TOUCHKEY                                                          05/06/2020 18:31:00 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE TOUCHKEY
OBJECT MODULE PLACED IN .\TouchKey.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\src\TouchKey.C LARGE OPTIMIZE(8,SPEED) BROWSE NOAREGS INCDIR(..\src) 
                    -DEBUG OBJECTEXTEND PRINT(.\TouchKey.lst) TABS(2) OBJECT(.\TouchKey.obj)

line level    source

   1          /********************************** (C) COPYRIGHT *******************************
   2          * File Name          : TouchKey.C
   3          * Author             : WCH
   4          * Version            : V1.2
   5          * Date               : 2019/07/22
   6          * Description        : Touchkey driver c file.
   7          *******************************************************************************/
   8          #include "CH554.H"                                                          
   9          #include "Debug.H"
  10          #include "stdio.H"
  11          #include "TOUCHKEY.H"
  12          
  13          #include "main.h"
  14          
  15          /*******************************************************************************
  16          Input channel as below:
  17          
  18           bTKC_CHAN2 |bTKC_CHAN1 |bTKC_CHAN0 | CHANNEL       | PIN   
  19           -----------+-----------+-----------+-----------------------+------------
  20            0   | 0   | 0   | no channel      | ****    
  21            0   | 0   | 1   | TIN0        | P1.0    
  22            0   | 1   | 0   | TIN1        | P1.1    
  23            0   | 1   | 1   | TIN2        | P1.4    
  24            1   | 0   | 0   | TIN3        | P1.5    
  25            1   | 0   | 1   | TIN4        | P1.6    
  26            1   | 1   | 0   | TIN5        | P1.7    
  27            1   | 1   | 1   | Enable touch core | no channel
  28            
  29          *******************************************************************************/
  30            
  31          UINT8   TK_Code[TOUCH_NUM] = {                /* Arrange the input channel */     
  32          //  0x01, 0x02,                               /* CH0 CH1 */
  33            0x03, 0x04,                                 /* CH2 CH3 */
  34            0x05, 0x06                                  /* CH4 CH5 */
  35          };    
  36          
  37          UINT16  Key_FreeBuf[TOUCH_NUM];
  38          UINT16  Key_DataBuf[TOUCH_NUM];
  39          UINT8V  Touch_IN = 0;                         /* BIT6 & BIT7 reserved, other bit means touch state */
  40          volatile UINT8 Press_Flag = 0; 
  41          
  42          
  43          /*******************************************************************************
  44          * Function Name  : TK_SelectChannel
  45          * Description    : Select TK input channel.
  46          * Input          : ch : input channel.
  47          * Return         : SUCCESS/FAIL.
  48          *******************************************************************************/
  49          UINT8 TK_SelectChannel( UINT8 ch )
  50          {
  51   1        if ( ch <= TOUCH_NUM )
  52   1        {
  53   2          TKEY_CTRL = ( TKEY_CTRL & 0XF8) | TK_Code[ch];
  54   2          return SUCCESS;
C51 COMPILER V9.56.0.0   TOUCHKEY                                                          05/06/2020 18:31:00 PAGE 2   

  55   2        }
  56   1      
  57   1        return  FAIL;
  58   1      }
  59          
  60          /*******************************************************************************
  61          * Function Name  : TK_Init
  62          * Description    : Init input channel. Float input, if it used for touchkey
  63          * Input          : channel   : IO bits, configure the Hi-z mode for touch detection.
  64                     queryFreq : Scan frequence. 0: 1ms , 1: 2ms.
  65                     ie    : Enable interrupt, 0:disable ; i: enable.
  66          * Return         : Return FAIL, if channel's error.
  67          *******************************************************************************/
  68          UINT8 TK_Init( UINT8 channel , UINT8 queryFreq, UINT8 ie )
  69          {
  70   1      
  71   1        UINT8   i,j;
  72   1        UINT16  sum;
  73   1        UINT16  OverTime;
  74   1        if ( ( channel & (BIT2+BIT3) ) != 0 )             /* not include BIT2 & BIT3 */
  75   1        {
  76   2          return FAIL;
  77   2        }
  78   1        
  79   1        P1_DIR_PU &= ~channel;
  80   1        P1_MOD_OC &= ~channel;
  81   1        
  82   1        if( queryFreq != 0 ) 
  83   1        {
  84   2          TKEY_CTRL |= bTKC_2MS ;
  85   2        }
  86   1        
  87   1        /* Get Key_FreeBuf. Save the data in flash or macro define. */
  88   1        /* DO NOT get Key_FreeBuf in Mass Production. */
  89   1        for ( i = 0; i < TOUCH_NUM; i++ )
  90   1        {
  91   2          
  92   2          sum = 0;
  93   2          j = SAMPLE_TIMES;
  94   2          TK_SelectChannel( i );
  95   2      //    TKEY_CTRL |= TK_Code[i];
  96   2          while( j-- )
  97   2          {
  98   3            OverTime = 0;
  99   3            while( ( TKEY_CTRL & bTKC_IF ) == 0 )
 100   3            {
 101   4              if( ++OverTime == 0 )
 102   4              {
 103   5                return FAIL;
 104   5              }
 105   4            }
 106   3            sum += TKEY_DAT;                          /*  */
 107   3          }
 108   2          Key_FreeBuf[i] = sum / SAMPLE_TIMES;
 109   2          printf( "Key_FreeBuf[%d]=%d\t", (UINT16)(i), (UINT16)Key_FreeBuf[i] );
 110   2        }
 111   1        printf( "\n" );
 112   1        if( ie != 0 )                               /* Enable interrupt ?  */   
 113   1        {
 114   2          IE_TKEY = 1;                            
 115   2        }   
 116   1        
C51 COMPILER V9.56.0.0   TOUCHKEY                                                          05/06/2020 18:31:00 PAGE 3   

 117   1        return SUCCESS;
 118   1      }
 119          
 120          
 121          
 122          /*******************************************************************************
 123          * Function Name  : ABS
 124          * Description    : 求两个数差值的绝对值
 125          * Input          : a,b
 126          * Output         : None
 127          * Return         : 差值绝对值
 128          *******************************************************************************/
 129          UINT16 ABS(UINT16 a,UINT16 b)
 130          {
 131   1          if(a>b)
 132   1          {
 133   2              return (a-b);
 134   2          }
 135   1          else
 136   1          {
 137   2              return (b-a);
 138   2          }
 139   1      }
 140          
 141          
 142          
 143          
 144          /*******************************************************************************
 145          * Function Name  : TK_Measure
 146          * Description    : Measure touch input.
 147          * Input          : None
 148          * Return         : None
 149          *******************************************************************************/
 150          UINT8 TK_Measure( void )
 151          {
 152   1        UINT8   i,j,num;
 153   1        UINT16 err;
 154   1        UINT16  sum;
 155   1        UINT16  OverTime, KeyData;
 156   1        
 157   1        for ( i = 0; i < TOUCH_NUM; i++ )
 158   1        {
 159   2          sum = 0;
 160   2          j = SAMPLE_TIMES;
 161   2          TK_SelectChannel( i );
 162   2          num = TK_Code[i] - 1;
 163   2          
 164   2          while( j-- )
 165   2          {
 166   3            OverTime = 0;
 167   3            while( ( TKEY_CTRL & bTKC_IF ) == 0 )
 168   3            {
 169   4              if( ++OverTime == 0 )
 170   4              {
 171   5                return FAIL;
 172   5              }
 173   4            }
 174   3            sum += TKEY_DAT;                          /*  */
 175   3          }
 176   2          Key_DataBuf[i] = sum / SAMPLE_TIMES;
 177   2          
 178   2          // print all keys value in loop
C51 COMPILER V9.56.0.0   TOUCHKEY                                                          05/06/2020 18:31:00 PAGE 4   

 179   2          //printf( "Key_DataBuf[%d]=%d\t", (UINT16)(i), (UINT16)Key_DataBuf[i] );
 180   2          
 181   2          err =  ABS(Key_FreeBuf[i],Key_DataBuf[i]);
 182   2           if( err > DOWM_THRESHOLD_VALUE )   
 183   2           {
 184   3             if((Press_Flag & (1<<i)) == 0) 
 185   3             {
 186   4              printf("ch %d pressed,value:%d\n",(UINT16)num, Key_DataBuf[i]);
 187   4              LED=!LED;
 188   4             }  
 189   3                    Press_Flag |= (1<<i);      
 190   3           }
 191   2           else if( err < UP_THRESHOLD_VALUE )                                //说明抬起或者未按下
 192   2          {
 193   3            if(Press_Flag & (1<<i))                                       //刚抬起
 194   3            {
 195   4              Press_Flag &= ~(1<<i);
 196   4              printf("ch %d up,value:%d\n",(UINT16)num, Key_DataBuf[i]);
 197   4            }
 198   3          }
 199   2        }
 200   1      //  printf( "\n" );
 201   1        
 202   1        return SUCCESS;
 203   1      }
*** WARNING C280 IN LINE 155 OF ..\src\TouchKey.C: 'KeyData': unreferenced local variable
 204          
 205          
 206          
 207          /*******************************************************************************
 208          * Function Name  : TK_int_ISR
 209          * Description    : Touch key interrupt routing for touch key scan.
 210          * Input          : None.
 211          * Return         : None.
 212          *******************************************************************************/
 213          void TK_int_ISR( void ) interrupt INT_NO_TKEY using 1
 214          {
 215   1        static UINT8 ch = 0;
 216   1        UINT16 KeyData;
 217   1        KeyData = TKEY_DAT;
 218   1        
 219   1        if( KeyData < ( Key_FreeBuf[ch] - TH_VALUE ) )
 220   1        {
 221   2          Touch_IN |=  1 << ( TK_Code[ch] - 1 );
 222   2        }
 223   1        
 224   1        printf( "ch[%d]=%d\t", (UINT16)(TK_Code[ch] - 1), (UINT16)KeyData );
 225   1      
 226   1        if( ++ch >= TOUCH_NUM )
 227   1        {
 228   2      //    printf("\n");
 229   2          ch = 0;
 230   2        } 
 231   1        TK_SelectChannel( ch );
 232   1      
 233   1      
 234   1      }
 235          /* End of file. */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    833    ----
C51 COMPILER V9.56.0.0   TOUCHKEY                                                          05/06/2020 18:31:00 PAGE 5   

   CONSTANT SIZE    =     76    ----
   XDATA SIZE       =     23      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
