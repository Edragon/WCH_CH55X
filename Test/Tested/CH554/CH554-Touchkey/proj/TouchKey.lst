C51 COMPILER V9.56.0.0   TOUCHKEY                                                          04/29/2020 14:16:26 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE TOUCHKEY
OBJECT MODULE PLACED IN .\TouchKey.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\src\TouchKey.C LARGE OPTIMIZE(8,SPEED) BROWSE NOAREGS INCDIR(..\src) 
                    -DEBUG OBJECTEXTEND PRINT(.\TouchKey.lst) TABS(2) OBJECT(.\TouchKey.obj)

line level    source

   1          /********************************** (C) COPYRIGHT *******************************
   2          * File Name          : TouchKey.C
   3          * Author             : WCH
   4          * Version            : V1.2
   5          * Date               : 2019/07/22
   6          * Description        : Touchkey driver c file.
   7          *******************************************************************************/
   8          #include "CH554.H"                                                          
   9          #include "Debug.H"
  10          #include "stdio.H"
  11          #include "TOUCHKEY.H"
  12          /*******************************************************************************
  13          Input channel as below:
  14          
  15           bTKC_CHAN2 |bTKC_CHAN1 |bTKC_CHAN0 | CHANNEL       | PIN   
  16           -----------+-----------+-----------+-----------------------+------------
  17            0   | 0   | 0   | no channel      | ****    
  18            0   | 0   | 1   | TIN0        | P1.0    
  19            0   | 1   | 0   | TIN1        | P1.1    
  20            0   | 1   | 1   | TIN2        | P1.4    
  21            1   | 0   | 0   | TIN3        | P1.5    
  22            1   | 0   | 1   | TIN4        | P1.6    
  23            1   | 1   | 0   | TIN5        | P1.7    
  24            1   | 1   | 1   | Enable touch core | no channel
  25            
  26          *******************************************************************************/
  27            
  28          UINT8   TK_Code[TOUCH_NUM] = {                /* Arrange the input channel */     
  29          //  0x01, 0x02,                               /* CH0 CH1 */
  30            0x03, 0x04,                                 /* CH2 CH3 */
  31            0x05, 0x06                                  /* CH4 CH5 */
  32          };    
  33          
  34          UINT16  Key_FreeBuf[TOUCH_NUM];
  35          UINT16  Key_DataBuf[TOUCH_NUM];
  36          UINT8V  Touch_IN = 0;                         /* BIT6 & BIT7 reserved, other bit means touch state */
  37          volatile UINT8 Press_Flag = 0; 
  38          
  39          
  40          /*******************************************************************************
  41          * Function Name  : TK_SelectChannel
  42          * Description    : Select TK input channel.
  43          * Input          : ch : input channel.
  44          * Return         : SUCCESS/FAIL.
  45          *******************************************************************************/
  46          UINT8 TK_SelectChannel( UINT8 ch )
  47          {
  48   1        if ( ch <= TOUCH_NUM )
  49   1        {
  50   2          TKEY_CTRL = ( TKEY_CTRL & 0XF8) | TK_Code[ch];
  51   2          return SUCCESS;
  52   2        }
  53   1      
  54   1        return  FAIL;
C51 COMPILER V9.56.0.0   TOUCHKEY                                                          04/29/2020 14:16:26 PAGE 2   

  55   1      }
  56          
  57          /*******************************************************************************
  58          * Function Name  : TK_Init
  59          * Description    : Init input channel. Float input, if it used for touchkey
  60          * Input          : channel   : IO bits, configure the Hi-z mode for touch detection.
  61                     queryFreq : Scan frequence. 0: 1ms , 1: 2ms.
  62                     ie    : Enable interrupt, 0:disable ; i: enable.
  63          * Return         : Return FAIL, if channel's error.
  64          *******************************************************************************/
  65          UINT8 TK_Init( UINT8 channel , UINT8 queryFreq, UINT8 ie )
  66          {
  67   1      
  68   1        UINT8   i,j;
  69   1        UINT16  sum;
  70   1        UINT16  OverTime;
  71   1        if ( ( channel & (BIT2+BIT3) ) != 0 )             /* not include BIT2 & BIT3 */
  72   1        {
  73   2          return FAIL;
  74   2        }
  75   1        
  76   1        P1_DIR_PU &= ~channel;
  77   1        P1_MOD_OC &= ~channel;
  78   1        
  79   1        if( queryFreq != 0 ) 
  80   1        {
  81   2          TKEY_CTRL |= bTKC_2MS ;
  82   2        }
  83   1        
  84   1        /* Get Key_FreeBuf. Save the data in flash or macro define. */
  85   1        /* DO NOT get Key_FreeBuf in Mass Production. */
  86   1        for ( i = 0; i < TOUCH_NUM; i++ )
  87   1        {
  88   2          
  89   2          sum = 0;
  90   2          j = SAMPLE_TIMES;
  91   2          TK_SelectChannel( i );
  92   2      //    TKEY_CTRL |= TK_Code[i];
  93   2          while( j-- )
  94   2          {
  95   3            OverTime = 0;
  96   3            while( ( TKEY_CTRL & bTKC_IF ) == 0 )
  97   3            {
  98   4              if( ++OverTime == 0 )
  99   4              {
 100   5                return FAIL;
 101   5              }
 102   4            }
 103   3            sum += TKEY_DAT;                          /*  */
 104   3          }
 105   2          Key_FreeBuf[i] = sum / SAMPLE_TIMES;
 106   2          printf( "Key_FreeBuf[%d]=%d\t", (UINT16)(i), (UINT16)Key_FreeBuf[i] );
 107   2        }
 108   1        printf( "\n" );
 109   1        if( ie != 0 )                               /* Enable interrupt ?  */   
 110   1        {
 111   2          IE_TKEY = 1;                            
 112   2        }   
 113   1        
 114   1        return SUCCESS;
 115   1      }
 116          
C51 COMPILER V9.56.0.0   TOUCHKEY                                                          04/29/2020 14:16:26 PAGE 3   

 117          
 118          
 119          /*******************************************************************************
 120          * Function Name  : ABS
 121          * Description    : 求两个数差值的绝对值
 122          * Input          : a,b
 123          * Output         : None
 124          * Return         : 差值绝对值
 125          *******************************************************************************/
 126          UINT16 ABS(UINT16 a,UINT16 b)
 127          {
 128   1          if(a>b)
 129   1          {
 130   2              return (a-b);
 131   2          }
 132   1          else
 133   1          {
 134   2              return (b-a);
 135   2          }
 136   1      }
 137          
 138          
 139          
 140          
 141          /*******************************************************************************
 142          * Function Name  : TK_Measure
 143          * Description    : Measure touch input.
 144          * Input          : None
 145          * Return         : None
 146          *******************************************************************************/
 147          UINT8 TK_Measure( void )
 148          {
 149   1        UINT8   i,j,num;
 150   1        UINT16 err;
 151   1        UINT16  sum;
 152   1        UINT16  OverTime, KeyData;
 153   1        
 154   1        for ( i = 0; i < TOUCH_NUM; i++ )
 155   1        {
 156   2          sum = 0;
 157   2          j = SAMPLE_TIMES;
 158   2          TK_SelectChannel( i );
 159   2          num = TK_Code[i] - 1;
 160   2          
 161   2          while( j-- )
 162   2          {
 163   3            OverTime = 0;
 164   3            while( ( TKEY_CTRL & bTKC_IF ) == 0 )
 165   3            {
 166   4              if( ++OverTime == 0 )
 167   4              {
 168   5                return FAIL;
 169   5              }
 170   4            }
 171   3            sum += TKEY_DAT;                          /*  */
 172   3          }
 173   2          Key_DataBuf[i] = sum / SAMPLE_TIMES;
 174   2          
 175   2          // print all keys value in loop
 176   2          //printf( "Key_DataBuf[%d]=%d\t", (UINT16)(i), (UINT16)Key_DataBuf[i] );
 177   2          
 178   2          err =  ABS(Key_FreeBuf[i],Key_DataBuf[i]);
C51 COMPILER V9.56.0.0   TOUCHKEY                                                          04/29/2020 14:16:26 PAGE 4   

 179   2           if( err > DOWM_THRESHOLD_VALUE )   
 180   2           {
 181   3             if((Press_Flag & (1<<i)) == 0) 
 182   3             {
 183   4              printf("ch %d pressed,value:%d\n",(UINT16)num, Key_DataBuf[i]);
 184   4             }  
 185   3                    Press_Flag |= (1<<i);      
 186   3           }
 187   2           else if( err < UP_THRESHOLD_VALUE )                                //说明抬起或者未按下
 188   2          {
 189   3            if(Press_Flag & (1<<i))                                       //刚抬起
 190   3            {
 191   4              Press_Flag &= ~(1<<i);
 192   4              printf("ch %d up,value:%d\n",(UINT16)num, Key_DataBuf[i]);
 193   4            }
 194   3          }
 195   2        }
 196   1      //  printf( "\n" );
 197   1        
 198   1        return SUCCESS;
 199   1      }
*** WARNING C280 IN LINE 152 OF ..\src\TouchKey.C: 'KeyData': unreferenced local variable
 200          
 201          
 202          
 203          /*******************************************************************************
 204          * Function Name  : TK_int_ISR
 205          * Description    : Touch key interrupt routing for touch key scan.
 206          * Input          : None.
 207          * Return         : None.
 208          *******************************************************************************/
 209          void TK_int_ISR( void ) interrupt INT_NO_TKEY using 1
 210          {
 211   1        static UINT8 ch = 0;
 212   1        UINT16 KeyData;
 213   1        KeyData = TKEY_DAT;
 214   1        
 215   1        if( KeyData < ( Key_FreeBuf[ch] - TH_VALUE ) )
 216   1        {
 217   2          Touch_IN |=  1 << ( TK_Code[ch] - 1 );
 218   2        }
 219   1        
 220   1        printf( "ch[%d]=%d\t", (UINT16)(TK_Code[ch] - 1), (UINT16)KeyData );
 221   1      
 222   1        if( ++ch >= TOUCH_NUM )
 223   1        {
 224   2      //    printf("\n");
 225   2          ch = 0;
 226   2        } 
 227   1        TK_SelectChannel( ch );
 228   1      
 229   1      
 230   1      }
 231          /* End of file. */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    831    ----
   CONSTANT SIZE    =     76    ----
   XDATA SIZE       =     23      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V9.56.0.0   TOUCHKEY                                                          04/29/2020 14:16:26 PAGE 5   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
